{"version":3,"file":"index.mjs","sources":["../../lib/LayoutGenerator.tsx"],"sourcesContent":["import { Stack } from \"expo-router\";\nimport { ComponentProps, FC, useCallback, useMemo } from \"react\";\n//import * as SplashScreen from 'expo-splash-screen';\nimport \"react-native-reanimated\";\nimport { pageConfig } from \"@gaddario98/react-pages\";\nimport { LayoutGeneratorProps, Screen } from \"./types\";\nimport { useAuthValue } from \"@gaddario98/react-auth\";\n//SplashScreen.preventAutoHideAsync();\n\nconst LayoutGenerator = ({\n  screens,\n  userType,\n  initialRouteName,\n}: LayoutGeneratorProps) => {\n  const user = useAuthValue();\n\n  const isAuthenticated = useMemo(() => pageConfig.isLogged(user), [user]);\n\n  const isRedirect = useCallback(\n    (screen: Screen) => {\n      let val = false;\n      if (!screen) return false;\n      if (screen.requireAuth) val = !isAuthenticated;\n      if (screen.hideIfAuth) val = isAuthenticated;\n      if (screen.userType && userType !== screen.userType) val = true;\n      return val;\n    },\n    [isAuthenticated, userType]\n  );\n\n  const screenOptions = useMemo(\n    (): ComponentProps<typeof Stack>[\"screenOptions\"] => ({\n      headerShown: false,\n      keyboardHandlingEnabled: true,\n    }),\n    []\n  );\n  /*\n  const renderHeader = useCallback(\n    (title: string, customNs?: string, props?: Screen[\"headerProps\"]) =>\n      title ? (\n        <Header\n          title={t(title, { ns: customNs ?? ns })}\n          {...props}\n          style={{\n            marginHorizontal: padding,\n            marginTop: padding / 2,\n          }}\n          leftAction={{\n            icon: \"arrow-back\",\n            onPress() {\n              router.back();\n            },\n          }}\n        />\n      ) : null,\n    [ns, t]\n  );*/\n\n  return (\n    <Stack\n      screenOptions={screenOptions}\n      initialRouteName={initialRouteName ?? screens[0].name}\n    >\n      {screens.map((screen) => {\n        return (\n          <Stack.Screen\n            key={screen.name}\n            name={screen.name}\n            options={{\n              headerShown: Boolean(screen.header),\n              header: screen.header,\n              ...(screen?.options ?? {}),\n            }}\n            redirect={isRedirect(screen)}\n           /* getId={({ params }) => {\n              const p = params?.[screen.name.slice(1, -1)];\n              return `${screen.name}/${p ?? \"\"}`;\n            }}dangerouslySingular*/\n          />\n        );\n      })}\n    </Stack>\n  );\n};\n\nexport default LayoutGenerator;\n"],"names":["_jsx"],"mappings":";;;;;;;AAOA;AAEA,MAAM,eAAe,GAAG,CAAC,EACvB,OAAO,EACP,QAAQ,EACR,gBAAgB,GACK,KAAI;AACzB,IAAA,MAAM,IAAI,GAAG,YAAY,EAAE;AAE3B,IAAA,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AAExE,IAAA,MAAM,UAAU,GAAG,WAAW,CAC5B,CAAC,MAAc,KAAI;QACjB,IAAI,GAAG,GAAG,KAAK;AACf,QAAA,IAAI,CAAC,MAAM;AAAE,YAAA,OAAO,KAAK;QACzB,IAAI,MAAM,CAAC,WAAW;YAAE,GAAG,GAAG,CAAC,eAAe;QAC9C,IAAI,MAAM,CAAC,UAAU;YAAE,GAAG,GAAG,eAAe;QAC5C,IAAI,MAAM,CAAC,QAAQ,IAAI,QAAQ,KAAK,MAAM,CAAC,QAAQ;YAAE,GAAG,GAAG,IAAI;AAC/D,QAAA,OAAO,GAAG;AACZ,IAAA,CAAC,EACD,CAAC,eAAe,EAAE,QAAQ,CAAC,CAC5B;AAED,IAAA,MAAM,aAAa,GAAG,OAAO,CAC3B,OAAsD;AACpD,QAAA,WAAW,EAAE,KAAK;AAClB,QAAA,uBAAuB,EAAE,IAAI;KAC9B,CAAC,EACF,EAAE,CACH;AACD;;;;;;;;;;;;;;;;;;;;AAoBI;AAEJ,IAAA,QACEA,GAAA,CAAC,KAAK,EAAA,EACJ,aAAa,EAAE,aAAa,EAC5B,gBAAgB,EAAE,gBAAgB,KAAA,IAAA,IAAhB,gBAAgB,KAAA,MAAA,GAAhB,gBAAgB,GAAI,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAA,QAAA,EAEpD,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,KAAI;;YACtB,QACEA,GAAA,CAAC,KAAK,CAAC,MAAM,IAEX,IAAI,EAAE,MAAM,CAAC,IAAI,EACjB,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,EACL,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EACnC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAA,GACjB,CAAA,EAAA,GAAA,MAAM,KAAA,IAAA,IAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,EAAA,GAAI,EAAE,IAE3B,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC,EAAA,EAPvB,MAAM,CAAC,IAAI,CAYhB;QAEN,CAAC,CAAC,EAAA,CACI;AAEZ;;;;"}